ext {
    timeList = buildTime()
//    year = timeList[0] - getFirstYear()
    year = timeList[0] - 2018
    month = timeList[1]
    birthday = timeList[0] + "/" + timeList[1] + "/1"
    commitCount = getCommitCount(birthday)
    //app版本
    versionCode = genVerCode(timeList[0], month, commitCount)
    versionName = genVerName(year, month, commitCount)
    versionBranch = getLocalBranchName()

    //android开发版本配置
    androidSdk = [
            compileSdkVersion: 30,
            buildToolsVersion: "28.0.3",
            applicationId    : "com.journeyOS.liteweather",
            minSdkVersion    : 17,
            targetSdkVersion : 30,
    ]

    //version配置
    versions = [
            "support-version": "1.0.0",
    ]

    //support配置
    support = [
            'support-v4'              : "androidx.legacy:legacy-support-v4:${versions["support-version"]}",
            'appcompat-v7'            : "androidx.appcompat:appcompat:${versions["support-version"]}",
            'recyclerview-v7'         : "androidx.recyclerview:recyclerview:${versions["support-version"]}",
            'support-v13'             : "androidx.legacy:legacy-support-v13:${versions["support-version"]}",
            'support-fragment'        : "androidx.fragment:fragment:${versions["support-version"]}",
            'design'                  : "com.google.android.material:material:${versions["support-version"]}",
            'animated-vector-drawable': "androidx.vectordrawable:vectordrawable-animated:${versions["support-version"]}",
    ]

    /*3方核心库版本*/
    dependencies = [
            "lite-framework"                       : "com.github.journeyOS:LiteFramework:2.3.0",
            //Google AAC
            "lifecycle-extensions"                 : "androidx.lifecycle:lifecycle-extensions:2.0.0",
            "lifecycle-compiler"                   : "androidx.lifecycle:lifecycle-compiler:2.0.0",
            //room数据库
            "room"                                 : "androidx.room:room:2.2.5",
            "room-runtime"                         : "androidx.room:room-runtime:2.2.5",
            "room-compiler"                        : "androidx.room:room-compiler:2.2.5",
            //rxjava
            "rxjava"                               : "io.reactivex.rxjava2:rxjava:2.2.3",
            "rxandroid"                            : "io.reactivex.rxjava2:rxandroid:2.1.0",
            //rx系列与View生命周期同步
            "rxlifecycle"                          : "com.trello.rxlifecycle2:rxlifecycle:2.2.2",
            "rxlifecycle-components"               : "com.trello.rxlifecycle2:rxlifecycle-components:2.2.2",
            //rxbinding
            "rxbinding"                            : "com.jakewharton.rxbinding2:rxbinding:2.1.1",
            //rx 6.0权限请求
            "rxpermissions"                        : "com.github.tbruyelle:rxpermissions:0.10.2",
            //network
            "okhttp"                               : "com.squareup.okhttp3:okhttp:3.10.0",
            "retrofit"                             : "com.squareup.retrofit2:retrofit:2.4.0",
            "converter-gson"                       : "com.squareup.retrofit2:converter-gson:2.4.0",
            "adapter-rxjava"                       : "com.squareup.retrofit2:adapter-rxjava2:2.4.0",
            //glide图片加载
            "glide"                                : "com.github.bumptech.glide:glide:4.11.0",
            "glide-compiler"                       : "com.github.bumptech.glide:compiler:4.11.0",
            //json解析
            "gson"                                 : "com.google.code.gson:gson:2.8.6",
            //material-dialogs
            "material-dialogs-core"                : "com.afollestad.material-dialogs:core:0.9.6.0",
            "material-dialogs-commons"             : "com.afollestad.material-dialogs:commons:0.9.6.0",
            //recyclerview的databinding套装
            "bindingcollectionadapter"             : "me.tatarka.bindingcollectionadapter2:bindingcollectionadapter:4.0.0",
            "bindingcollectionadapter-recyclerview": "me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-recyclerview:4.0.0",
            "bindingcollectionadapter-viewpager2"  : "me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-viewpager2:4.0.0",
            //阿里路由框架
            "arouter-api"                          : "com.alibaba:arouter-api:1.5.2",
            "arouter-compiler"                     : "com.alibaba:arouter-compiler:1.5.2",
    ]

    /*3方库版本*/
    others = [
            //SwitchButton
            "switchbutton"    : "com.kyleduo.switchbutton:library:2.1.0",
            "bottom-tab"      : "me.majiajie:pager-bottom-tab-strip:2.2.5",
            "expandablelayout": "net.cachapa.expandablelayout:expandablelayout:2.9.2"
    ]
}

//https://stackoverflow.com/questions/17097263/automatic-versioning-of-android-build-using-git-describe-with-gradle
def static getFirstYear() {
    def year = "git log --reverse --format=\"format:%ci\" | sed -n 1p | awk '{print \$1}'".execute().toInteger()
    return year
}
/**
 * 组织版本号（VersionCode）
 * @param year 大版本
 * @param month 小版本
 * @param commitCount 小版本版本启动日
 * @return eg:2021072513
 */
def static genVerCode(int year, int month, int commitCount) {
    return year * 100 * 100 + month * 100 + commitCount
}

/**
 * 组织版本名（VersionName）
 * @param year 大版本
 * @param month 小版本
 * @param commitCount 小版本版本启动日
 * @return eg:v1.2.48.190210.dev.aabbcc
 */
def static genVerName(int year, int month, int commitCount) {
    def today = new Date().format("yyMMdd")
    def branchName = getLocalBranchName()
    def shortId = getShortCommitId()
    return "v$year.$month.$commitCount.$today.$branchName.$shortId"
}

/**
 * 获取累计提交数
 *
 * @param 小版本号更新日期
 * @return 累计提交数
 */
def static getCommitCount(String date, String path = "./") {
    def mainCountCmd = ["git", "log", "--pretty=format:%h", "--after='$date 0:0:0 +0800'", path]

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return mainCountCmd.execute().pipeTo("find /v \"\" /c".execute()).text.toInteger()
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        return mainCountCmd.execute().pipeTo("wc -l".execute()).text.toInteger() + 1
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        return mainCountCmd.execute().pipeTo("wc -l".execute()).text.toInteger() + 1
    }
    //可通过以下指令查看具体提交的位置
    /*git log -47 --pretty=oneline --after="Mon Mar 25 10:31:38 2019 +0800"*/
}

/**
 * 获取简短commit号
 * @return
 */
def static getShortCommitId() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}


def static getLocalBranchName() {
    def result = "git symbolic-ref --short -q HEAD".execute().text.trim()
    result += ""
    return result
}

def static buildTime() {
    def year = new Date().format("yyyy", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    def month = new Date().format("MM", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    def day = new Date().format("dd", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    return [year, month, day]
}
